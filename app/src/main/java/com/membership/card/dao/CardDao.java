package com.membership.card.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.membership.card.dao.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardName = new Property(1, String.class, "cardName", false, "CARD_NAME");
        public final static Property CardNumber = new Property(2, String.class, "cardNumber", false, "CARD_NUMBER");
        public final static Property CardNumberType = new Property(3, String.class, "cardNumberType", false, "CARD_NUMBER_TYPE");
        public final static Property CardBackground = new Property(4, String.class, "cardBackground", false, "CARD_BACKGROUND");
    };


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CARD_NAME\" TEXT," + // 1: cardName
                "\"CARD_NUMBER\" TEXT," + // 2: cardNumber
                "\"CARD_NUMBER_TYPE\" TEXT," + // 3: cardNumberType
                "\"CARD_BACKGROUND\" TEXT);"); // 4: cardBackground
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardName = entity.getCardName();
        if (cardName != null) {
            stmt.bindString(2, cardName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(3, cardNumber);
        }
 
        String cardNumberType = entity.getCardNumberType();
        if (cardNumberType != null) {
            stmt.bindString(4, cardNumberType);
        }
 
        String cardBackground = entity.getCardBackground();
        if (cardBackground != null) {
            stmt.bindString(5, cardBackground);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cardNumberType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cardBackground
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCardNumberType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCardBackground(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
